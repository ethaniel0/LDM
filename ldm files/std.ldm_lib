keyword for (
    %structure 
        for {typename typename is int} {name var} in {typed int start} %nospace% .. %nospace% {typed int end} %optional %nospace% ..{typed int step}% {block block}
    %
)

keyword if (
    %structure
        if {expression expr} {block block}
    %
)

keyword elif (
    %structure
        %after(keyword if) elif {expression expr} {block block} %
    %
)

keyword else (
    %structure
        %after(keyword if or keyword elif) 
            else {expression expr} {block block}
        %
    %
)

keyword while (
    %structure
        while {expression expr} {block block}
    %
)

make_variable (
    %structure
        {typename typename} {name varname} %optional = {expression expr}%
    %
)

operator + (
    %precedence 8 %
    %structure binary %
    %returns left_type %
)

operator - (
    %precedence 8 %
    %structure binary %
    %returns left_type %
)

operator * (
    %precedence 9 %
    %structure binary %
    %returns left_type %
)

operator / (
    %precedence 9 %
    %structure binary %
    %returns left_type %
)

operator - (
    %precedence 10 %
    %structure unary_right %
    %returns right_type %
)

operator < (
    %precedence 5 %
    %structure binary %
    %returns type bool %
)

operator > (
    %precedence 5 %
    %structure binary %
    %returns type bool %
)

operator += (
    %precedence 1 %
    %structure binary %
    %returns none %
)

operator -= (
    %precedence 1 %
    %structure binary %
    %returns none %
)

operator <= (
    %precedence 1 %
    %structure binary %
    %returns type bool %
)

operator >= (
    %precedence 1 %
    %structure binary %
    %returns type bool %
)

operator = (
    %precedence 1 %
    %structure binary %
    %returns none %
)

operator ? (
    %precedence 1 %
    %structure custom %before(operator :) {value bool} ? {value option1}% %
    %returns var option1 %
)

operator : (
    %precedence 1 %
    %structure 
        custom %after(operator ?) : {value option2} % 
    %
    %returns var option2 %
)
