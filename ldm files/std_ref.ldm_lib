/*

    Types of definitions:
    - keyword (keyword)
    - operator (operator)
    - type-basic (primitive type, has no struct-type nature to it)
    - keyword-object (makes a structure that can be operated on)
    - make-object (defines variables, MUST HAVE: type as typename, object name as object)
    - set-object (sets variable)
    - object?
    

    preprocessor instructions:
        keyword:
            %structure %
                %optional %
                %after(Type __type__ or Type __type__ or ...) %
                %vararg(name __name sep __sep) % (with %name)
                %nospace
            
            %operator
        
        operator:
            %custom
            %before(operator __op_name__) %
            %after(operator __op_name__) %
        
    bracket instructions:
        keyword:
            {type __typename__}:  
            {typed Type __varname__}: varname associated with a variable of type Type
            {block __blockname__}: code block
            {expression __exprname__}: expression
            {name __name__}: a name specifier
            {typename Type}
        
        operator:
            {value __value_name__}
    
    operator structures:
        binary
        unary-right
        unary-left
        %custom ...

*/

// KEYWORDS

keyword for (
    %structure 
        for {typename typename is int} {name var} in {typed int start} %nospace .. %nospace {typed int end} %optional %nospace ..{typed int step}% {block block}
    %
)

keyword if (
    %structure
        if {expression expr} {block block}
    %
)

keyword elif (
    %structure
        %after(keyword if) elif {expression expr} {block block}
    %
)

keyword else (
    %structure
        %after(keyword if or keyword elif) else {expression expr} {block block}
    %
)

keyword while (
    %structure
        while {expression expr} {block block}
    %
)

// KEYWORD OBJECTS

keyword-object function (
    %structure 
        function {name name} (%vararg(name args sep ,) {typename typename} {name name}%): {typename type} {block block}
    %
)

// OBJECT DECLARATION
make-object standard (
    %structure
        {typename typename} {name object} %optional = {expression expr}%
    %
)

set-object standard (
    %structure
        {name object} = {expression expr}%
    %
)

